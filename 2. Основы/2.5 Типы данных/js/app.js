'use strict'

// Типы данных
// Языки программирования, в которых такое возможно, называются «динамически типизированными». Это значит, что типы данных есть, но переменные не привязаны ни к одному из них.

// Число
/* - Числовой тип данных (number) представляет как целочисленные значения, так и числа с плавающей точкой.
Существует множество операций для чисел, например, умножение *, деление /, сложение +, вычитание - и так далее.
 - Кроме обычных чисел, существуют так называемые «специальные числовые значения», которые относятся к этому типу данных: Infinity, -Infinity и NaN. */
// Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
// -  Мы можем получить его в результате деления на ноль:
// alert( 1 / 0 ); // Infinity

/* -  NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции, например: */
// alert( "не число" / 2 ); // NaN, такое деление является ошибкой

// Значение NaN «прилипчиво». Любая математическая операция с NaN возвращает NaN:
/* alert( NaN + 1 ); // NaN
alert( 3 * NaN ); // NaN
alert( "не число" / 2 - 1 ); // NaN */

// Если где-то в математическом выражении есть NaN, то оно распространяется на весь результат (есть только одно исключение: NaN ** 0 равно 1).

// BigInt

// Строка
// Строка (string) в JavaScript должна быть заключена в кавычки.
// Обратные же кавычки имеют расширенную функциональность. Они позволяют нам встраивать выражения в строку, заключая их в ${…}. Например:

// Булевый (логический) тип
// Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).


// Значение «null»
// Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».

// Значение «undefined»
// Оно означает, что «значение не было присвоено».
// Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined:
/* Но так делать не рекомендуется. Обычно null используется для присвоения переменной «пустого» или «неизвестного» значения, а undefined – для проверок, была ли переменная назначена. */

// Объекты и символы
// Тип object (объект) – особенный.
/* Все остальные типы называются «примитивными», потому что их значениями могут быть только простые значения (будь то строка, или число, или что-то ещё). В объектах же хранят коллекции данных или более сложные структуры. */

// Оператор typeof
/* Оператор typeof возвращает тип аргумента. Это полезно, когда мы хотим обрабатывать значения различных типов по-разному или просто хотим сделать проверку.

У него есть две синтаксические формы:

Синтаксис оператора: typeof x.
Синтаксис функции: typeof(x).
Другими словами, он работает со скобками или без скобок. Результат одинаковый.

Вызов typeof x возвращает строку с именем типа: */

/* Итого
В JavaScript есть 8 основных типов данных.

Семь из них называют «примитивными» типами данных:
number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
bigint для целых чисел произвольной длины.
string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
boolean для true/false.
null для неизвестных значений – отдельный тип, имеющий одно значение null.
undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
symbol для уникальных идентификаторов.
И один не является «примитивным» и стоит особняком:
object для более сложных структур данных.
Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.

Имеет две формы: typeof x или typeof(x).
Возвращает строку с именем типа. Например, "string".
Для null возвращается "object" – это ошибка в языке, на самом деле это не объект. */

// Задачи
// Что выведет этот скрипт?
/* let name = "Ilya";
console.log( `hello ${1}` ); // hello 1
console.log( `hello ${"name"}` ); // hello name
console.log( `hello ${name}` ); // hello Ilya */

