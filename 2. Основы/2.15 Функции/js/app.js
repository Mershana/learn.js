'use strict'

// Функции

// Выбор имени функции

/* Например, функции, начинающиеся с "show" обычно что-то показывают.

Функции, начинающиеся с…

"get…" – возвращают значение,
"calc…" – что-то вычисляют,
"create…" – что-то создают,
"check…" – что-то проверяют и возвращают логическое значение, и т.д. */

/* Итого
Объявление функции имеет вид:
function имя(параметры, через, запятую) {
//   тело, код функции 
}
Передаваемые значения копируются в параметры функции и становятся локальными переменными.
Функции имеют доступ к внешним переменным. Но это работает только изнутри наружу. Код вне функции не имеет доступа к её локальным переменным.
Функция может возвращать значение. Если этого не происходит, тогда результат равен undefined.
Для того, чтобы сделать код более чистым и понятным, рекомендуется использовать локальные переменные и параметры функций, не пользоваться внешними переменными.

Функция, которая получает параметры, работает с ними и затем возвращает результат, гораздо понятнее функции, вызываемой без параметров, но изменяющей внешние переменные, что чревато побочными эффектами.

Именование функций:

Имя функции должно понятно и чётко отражать, что она делает. Увидев её вызов в коде, вы должны тут же понимать, что она делает, и что возвращает.
Функция – это действие, поэтому её имя обычно является глаголом.
Есть много общепринятых префиксов, таких как: create…, show…, get…, check… и т.д. Пользуйтесь ими как подсказками, поясняющими, что делает функция.
Функции являются основными строительными блоками скриптов. Мы рассмотрели лишь основы функций в JavaScript, но уже сейчас можем создавать и использовать их. Это только начало пути. Мы будем неоднократно возвращаться к функциям и изучать их всё более и более глубоко. */

// Задачи
// Обязателен ли "else"?
/* Следующая функция возвращает true, если параметр age больше 18.

В ином случае она запрашивает подтверждение через confirm и возвращает его результат:

function checkAge(age) {
  if (age > 18) {
    return true;
  } else {
    // ...
    return confirm('Родители разрешили?');
  }
}
Будет ли эта функция работать как-то иначе, если убрать else?

function checkAge(age) {
  if (age > 18) {
    return true;
  }
  // ...
  return confirm('Родители разрешили?');
}
Есть ли хоть одно отличие в поведении этого варианта? */
// Оба варианта функций работают одинаково, отличий нет.

// Перепишите функцию, используя оператор '?' или '||'
/* Следующая функция возвращает true, если параметр age больше 18.
В ином случае она задаёт вопрос confirm и возвращает его результат.
function checkAge(age) {
  if (age > 18) {
    return true;
  } else {
    return confirm('Родители разрешили?');
  }
}
Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.
Сделайте два варианта функции checkAge:
Используя оператор ?
Используя оператор || */

// Используя оператор ?
/* function checkAge(age){
	return (age > 18) ? true: confirm('Родители разрешили?');
}
 
 // Используя оператор (самый короткий вариант): ||
function checkAge(age){
	return (age > 18) || confirm('Родители разрешили?');
} */
// Обратите внимание, что круглые скобки вокруг age > 18 не обязательны. Они здесь для лучшей читаемости кода.

// Функция min(a, b)
// Вариант решения с использованием if:
/* function getMinNumber(a, b){
	if (a < b){
		return a;
	} else {
		return b;
	}
} 
console.log(getMinNumber(15,2));

// Вариант решения с оператором ?:
function getMinNumber(a, b){
	return a < b ? a : b;
}
console.log(getMinNumber(15, 2)) */
// P.S. В случае равенства a == b не имеет значения, что возвращать.

/* Функция pow(x,n)
Напишите функцию pow(x,n), которая возвращает x в степени n. Иначе говоря, умножает x на себя n раз и возвращает результат.
pow(3, 2) = 3 * 3 = 9
pow(3, 3) = 3 * 3 * 3 = 27
pow(1, 100) = 1 * 1 * ...* 1 = 1
Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).
P.S. В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.
решение */
/* function pow(x, n){
	let result = x;

	for (let i = 1; i < n; i++){
		result *= x;
	}
	return result;
}
let x = prompt('x?', '');
let n = prompt('n?', '');

if(n < 1){
	console.log(`Степень ${n} не поддерживается, используйте натуральное число`);
} else {
	console.log(pow(x, n));
} */

// Локальные переменные
// Переменные, объявленные внутри функции, видны только внутри этой функции.

// Внешние переменные
// У функции есть доступ к внешним переменным, например:
// Функция обладает полным доступом к внешним переменным и может изменять их значение.
